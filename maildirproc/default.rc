# -*- python -*-
#

#                         :
# /dev/null               |
#     ^               .forward
#      '-----------.      |
#                  |      |   (auto
# (spam training)   \     V  training) (ham training)
#  incoming.spam  incoming.unknown    incoming.ham
#      \                 /|\                 /
#       \          spam / | \ ham           /
#        '-----. .-----'  |  '-----. .-----'
#              | |        |        | |
#              V V        |        | |
#            mail.spam    |        \ /  (archive training)
#                         V         Y
#                  daemon.pending   |
#                                   |
#                                   V
#                        incoming.archive.unknown
#                                   |
#       (no-archive training)       |        (archive training)
#           incoming.archive.not    V           incoming.archive
#                \                 /|\                 /
#                 \    no-archive / | \ archive       /
#                  '-----. .-----'  V  '-----. .-----'
#                        | |  archive.unsure  Y
#                        | |\                 |
#                        V V '----------\     +-------archive
#                   archive.not         V     V
#                                     incoming.unsorted
#                                     / / / / \ \ \ \ \
#                                    / / / /   \ \ \ \ \
#                                   ' ' ' '     ' ' ' ' '
#                                  ' ' ' '       ' ' ' ' '
#
# incoming.ham: Mail mistakenly classified as spam are moved here
# manually. Messages are unregistered as spam, registered as ham and
# moved to incoming.unsorted.
#
# incoming.spam: Mail mistakenly classified as ham are moved here
# manually. Messages are unregistered as ham, registered as spam and
# moved to mail.spam.
#
# incoming.unknown: This is the main entrance; getmail delivers mail
# here. Messages that bogofilter thinks are spam are registered as spam and
# moved to mail.spam. Other messages are registered as ham and moved to
# incoming.unsorted.
#
# incoming.unsorted: Messages are moved, copied and/or forwarded to
# suitable places. Messages can be moved here manually by a mail
# client if they need to be resorted without being run through the
# spam classification process.

import datetime
import email
import email.utils
import errno
import os
import pytz
import re
import subprocess
import sys

maildirproc = os.path.expanduser("~/.maildirproc")

# add import path for maildirproc specific code
sys.path += [ maildirproc + "/lib" ]

import autodbm
from listname import extract_list_name, maildir_folder_name

# constants
bogofilter="/usr/bin/bogofilter"
formail="/usr/bin/reformail"
version="0.5.0"   # maildirproc version: how can this be calculated?

######################################################################
# Spam handling
######################################################################
def autolearn_and_check_spam(mail):
    mail.xfilter([bogofilter, "-e", "-u", "-p", ])

    bogosity = mail["x-bogosity"]
    processor.log("*** bogofilter result: {0!r}".format(bogosity))

    return bogosity

def register_ham(mail):
    # only undo spam registration if it was classified as spam in the first place
    if mail["x-bogosity"].matches(r'spam'):
        processor.log_debug("... unlearning as spam and relearning as ham")
        args = ["-S", "-n", ]
    else:
        processor.log_debug("... not previously learned as spam, so just learning as ham")
        args = ["-n", ]

    return register_mail(mail,args)

def register_spam(mail):
    # only undo ham registration if it was classified as ham in the first place
    if mail["x-bogosity"].matches(r'ham'):
        processor.log_debug("... unlearning as ham and relearning as spam")
        args = ["-N", "-s", ]
    else:
        processor.log_debug("... not previously learned as ham, so just learning as spam")
        args = ["-s", ]

    return register_mail(mail,args)

def register_mail(mail, args):
    # embed mode for rc>0 only for registration failure, passthrough to update the message
    args[:0] = [bogofilter, "-e", "-p", ]

    return mail.xfilter(args)
def handle_incoming_ham(mail):
    processor.log("==> Learning as ham")
    if register_ham(mail):
        mail.copy(".daemon.ham")
        mail.move(".incoming.unsorted")
    else:
        processor.log_error("!!! Failed to learn as ham")
        mail.move(".daemon.sortfailed")

def handle_incoming_spam(mail):
    processor.log("==> Learning as spam")
    if register_spam(mail):
        mail.move(".daemon.spam")
    else:
        processor.log_error("!!! Failed to learn as spam")
        mail.move(".daemon.sortfailed")

def handle_incoming_unknown(mail):
  if should_deliver_direct(mail):
    processor.log("... Skipping spam and archive checks")
    if is_short_term(mail):
      mail.move(".topic.shortterm")
    else:
      mail.move(processor.maildir_base)
  else:
    processor.log("... Autolearning spamicity")
    bogosity = autolearn_and_check_spam(mail)

    if bogosity.matches("^Spam"):
        processor.log("==> Spam detected and learned")
        mail.move(".daemon.spam")
    else:
        if bogosity.matches("^Ham"):
            processor.log("==> Ham detected and learned")
            mail.copy(".daemon.ham")
            mail.move(".incoming.archive.unknown")
        else:
            processor.log("==> Spamicity unsure")
            mail.move(".daemon.pending")

######################################################################
# Archive handling
######################################################################
def autolearn_and_check_archive(mail):
    # don't archive if list headers are set
    if mail["list-id"] != "" or mail["list-post"] != "":
      mail.xfilter([formail, "-i",
        "X-Archive: No, tests=maildirproc, archivicity=0.000000, version=" + version])
    # otherwise pipe through bogofilter in archivicity mode
    else:
      mail.xfilter([bogofilter, "-e", "-u", "-p",
        "-c", os.path.expanduser("~/.bogofilter/config.archive"), ])

    bogosity = mail["x-archive"]
    processor.log("*** bogofilter result: {0!r}".format(bogosity))

    return bogosity

def register_archive(mail):
    # only undo no-archive registration if it was classified as no-archive in the first place
    if mail["x-archive"].matches(r'no'):
        processor.log_debug("... unlearning as no-archive and relearning as archive")
        args = ["-S", "-n", ]
    else:
        processor.log_debug("... not previously learned as no-archive, so just learning as archive")
        args = ["-n", ]

    return register_archive_mail(mail,args)

def register_noarchive(mail):
    # only undo archive registration if it was classified as archive in the first place
    if mail["x-archive"].matches(r'yes'):
        processor.log_debug("... unlearning as archive and relearning as no-archive")
        args = ["-N", "-s", ]
    else:
        processor.log_debug("... not previously learned as archive, so just learning as no-archive")
        args = ["-s", ]

    return register_archive_mail(mail,args)

def register_archive_mail(mail, args):
    # embed mode for rc>0 only for registration failure, passthrough to update the message
    args[:0] = [bogofilter, "-e", "-p", "-c", os.path.expanduser("~/.bogofilter/config.archive"), ]

    return mail.xfilter(args)

def handle_incoming_archive(mail):
    processor.log("==> Learning as archive")
    if register_archive(mail):
        mail.move(".archive")
    else:
        processor.log_error("!!! Failed to learn as archive")
        mail.move(".daemon.sortfailed")

def handle_incoming_noarchive(mail):
    processor.log("==> Learning as noarchive")
    if register_noarchive(mail):
        mail.move(".archive.not")
    else:
        processor.log_error("!!! Failed to learn as noarchive")
        mail.move(".daemon.sortfailed")

def handle_incoming_ecommerce(mail):
    processor.log("... Saving to .ecommerce and printing to PDF")
    mail.copy(".ecommerce")
    print_cmd = [maildirproc + "/bin/mailPrint"] + \
      list("--highlight=mail -P PDF".split(' '))
    mail.xfilter(print_cmd, consume=True)
    mail.delete()       # shouldn't be necessary for consume=True

def handle_incoming_archive_unknown(mail):
    processor.log("... Autolearning archivicity")
    archivicity = autolearn_and_check_archive(mail)

    if archivicity.matches("^No"):
      processor.log("==> No-archive detected and learned")
      mail.copy(".archive.not")
    else:
      if archivicity.matches("^Yes"):
        processor.log("==> Archive detected and learned")
        mail.copy(".archive")
      else:
        processor.log("==> Archivicity unsure")
        mail.copy(".archive.unsure")

    mail.move(".incoming.unsorted")

######################################################################
# Utility methods
######################################################################

# return true if message should skip archive and spam registration and filing
def should_deliver_direct(mail):
  if mail['subject'].matches(r'Held in pending'):
    return True
  elif mail['from'].matches('qcsummary@onebox.com'):
    return True
  else:
    return False

# deliver apt-listchanges mail to inbox or delete
def apt_listchanges(mail):
  # only deliver on Monday
  # procmail also delivered if any of the updates were NOT urgency=low,
  # but that logic never really got used
  now = datetime.datetime.now(pytz.timezone('US/Eastern'))
  if now.weekday() != 0:
    mail.delete()
  else:
    mail.move(processor.maildir_base)

def is_short_term(mail):
  for header in shortterm_mapping:
    for regex in shortterm_mapping[header]:
      if mail[header].matches(regex):
        return True
  return False

def in_body(mail_path, *args):
  regexes = list(args[:])

  try:
    # open with ASCII-compatible 8-bit encoding for simplicity, as
    # I don't expect to search for anything other than ASCII
    with open(mail_path, "r", encoding="iso-8859-1") as f:
      for line in f:
        for regex in regexes[:]:
          if re.search(regex, line):
            regexes.remove(regex)  # this one matched, no further tests needed
        if len(regexes) == 0:
          return True
      return False
  except IOError:
    return False

def mkdirs(path):
  # Python 3.2+:
  # os.makedirs(path, exist_ok=True)
  try:
    os.makedirs(path)
  except OSError as exc:
    if exc.errno == errno.EEXIST and os.path.isdir(path):
      pass
    else:
      raise

######################################################################
# Sorting
######################################################################

def handle_incoming_unsorted(mail):
  if mail["subject"].matches(r'(Debian|Ubuntu) package updates on'):
    apt_listchanges(mail)
  # deliver "I will teach you to be rich" emails to same folder as IWTYTBR RSS feed
  elif mail["sender"].matches(r'mailer@infusionmail.com'):
    mail.move(".feeds.misc")
  # deliver RJC roster email to roster processing
  elif mail['from'].matches('webmaster@raleighjaycees.org') and mail['subject'].matches('Requested file'):
    mail.xfilter([maildirproc + "/bin/jayceeRoster"], consume=True)
    mail.copy(".archive.not")
    mail.delete()       # shouldn't be necessary for consume=True
  elif mail['from'].matches('do-not-reply@seesaw.me'):
    pic_cmd = [maildirproc + "/bin/seesawPicExtract"]
    if mail.xfilter(pic_cmd, consume=True) == 0:
      mail.delete()
    else:
      mail.move(processor.maildir_base)
  elif mail['from'].matches(r"(kcarnell|dgannon)@wcpss\.net"):
    if mail["to"] == "":            # bulk send to all parents
      mail.forward_copy(parents)
    mail.move(processor.maildir_base)
  elif mail["subject"].matches(r'\[Wordfence Alert\]'):
    if mail["subject"].matches(r'www.raleighjaycees.org (Admin Login|Password recovery attempted)'):
      known_logins = (
        (r'user with email address: idvp@raleighjaycees.org', r'User IP: 152.39.96.254'),
        (r'user with email address: gcallums1@gmail.com', r'User IP: 99.43.178.115'),
        (r'user with username "President"', r'User IP: 99.43.178.115'),
      )
      for known_login in known_logins:
        if in_body(mail.path, *known_login):
          processor.log("*** Wordfence known login: {0}".format(known_login))
          mail.delete()
          return

    mail.move(processor.maildir_base)
  else:
    (name, error) = extract_list_name(str(mail["list-id"]), str(mail["list-post"]))
    if name in list_mapping.keys():
      for mailbox in re.split(r'\s*,\s*', list_mapping[name]):
        mail.copy(mailbox)
      # move to .lists.X, where X is the first dot delimited word
      list_shortname = maildir_folder_name(name)
      mail.move(list_shortname)
    else:
      if error is not None:
        processor.log_error(error)

      if is_short_term(mail):
        mail.move(".topic.shortterm")
      else:
        mail.move(processor.maildir_base)


######################################################################
# Mapping and processing
######################################################################
processor.maildir_base = "~/mail"
processor.auto_reload_rcfile = True

######################################################################
# configuration for forwarding
######################################################################
processor.sendmail = '/usr/sbin/sendmail'
processor.sendmail_flags = '-oi -f ed@edgewood.to'

# forwarding targets
parents = [
    'tblackman1@earthlink.net', 'valentineclown@earthlink.net',
    'cjerzak@att.net', 'sjerzak@att.net',
  ]
# lists that should go somewhere other than just maildir_base
#
# Mails to any list in the mapping are copied to each of the comma-delimited
# mailboxes listed, AND to ".lists.X" where X is the first '.' delimited word
# in the name.
#
# List mails to listnames NOT in the mapping just go to maildir_base

mailing_lists_mapping = maildirproc + "/lists"
db = autodbm.open(mailing_lists_mapping)
list_mapping = {}
for mailing_list in db.keys():
  list_dest = db[mailing_list].decode('utf-8')
  mailing_list = mailing_list.decode('utf-8')
  list_mapping[mailing_list] = list_dest

# Create header/regex mapping for messages to move to "short term" folder
#
# File has key/value pairs of regex/header (because the regex is the unique element),
# but mapping should be header/list of regexes for that header.  So
#
# emaileds@newsobserver.com             from
# updated\sher\sstatus                  subject
# shared.a.link                         Subject
#
# turns into {'from': ['emaileds@newsobserver.com'],
#             'subject': ['updated\sher\sstatus', 'shared.a.link']}
#
shortterm_header_mapping = maildirproc + "/shortterm_matches"
db = autodbm.open(shortterm_header_mapping)
shortterm_mapping = {}
for regex in db.keys():
  header = db[regex].decode('utf-8').lower()
  regex = regex.decode('utf-8')

  try:
    shortterm_mapping[header].append(regex)
  except KeyError:
    shortterm_mapping[header] = [regex]

#
#

handle_mapping = {
    ".incoming.ham": handle_incoming_ham,
    ".incoming.spam": handle_incoming_spam,
    ".incoming.unknown": handle_incoming_unknown,
    ".incoming.archive": handle_incoming_archive,
    ".incoming.archive.not": handle_incoming_noarchive,
    ".incoming.archive.unknown": handle_incoming_archive_unknown,
    ".incoming.unsorted": handle_incoming_unsorted,
    ".incoming.ecommerce": handle_incoming_ecommerce,
    }

for maildir in handle_mapping.keys():
  if maildir.startswith("."):
    for part in ["cur", "new", "tmp"]:
      mkdirs(os.path.join(processor.maildir_base, maildir, part))

processor.maildirs = handle_mapping.keys()

for mail in processor:
    handle_mapping[mail.maildir](mail)
