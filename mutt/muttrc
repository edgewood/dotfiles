# set from and other identity related variables
source "~/.mutt/rc/identity"

# Howto: mutt with Gmail/IMAP
# http://crunchbanglinux.org/wiki/howto/howto_setup_mutt_with_gmail_imap

# window title
set xterm_set_titles=yes
set xterm_title="mutt (%?u?%u unread ?%?n?%n new ?%m)"
set xterm_icon="mutt (%?u?%u unread ?%?n?%n new ?%m)"

set editor="~/.mutt/bin/editor"
set folder="~/mail/"
set spoolfile="~/mail/"
set mbox_type=Maildir
set postponed="=.drafts"
# Reverse sort by comment: changed http://unix.stackexchange.com/a/9358 to leave first line alone
set query_command="lbdbq '%s'|sed '1p;2!G;h;$!d'"
set forward_format="Fwd: %s"
# remove ^Ms from display
set display_filter="tr -d '\r'"
set mh_purge=yes
# Show different date/time formats in index based on message age
# WORKAROUND: '<%s>' used to work, but doesn't in NeoMutt 1.7.2. Width specifier fixes.
set index_format="/home/edgewood/.mutt/bin/format_date '%[%s]' '%1<%s>' |"
# persistant prompt history of commands, files, patterns...
set history_file="/home/edgewood/.cache/mutt/history"
set save_history=1000

# set trash folder to default, because some configs change it
set trash = ""

set sendmail="~/.mutt/bin/muttSend"     # muttSend calls sendmail
unset smtp_url                          # some configs set it, and it overrides $sendmail
set alias_file=~/.mutt/aliases

# use header cache, but not for mairix search folder, which has problems
folder-hook .           "set header_cache=~/.cache/mutt/headers"
folder-hook =search     "set header_cache="

# make sure all mutt config files are in ~/.mutt, not $HOME
set mailcap_path=~/.mutt/mailcap
set certificate_file =~/.mutt/certificates

message-hook .                          "auto_view text/html"
message-hook "~s 'Backup output'"       "auto_view text/html application/octet-stream"

source ~/.mutt/rc/alternative_order

set sort=threads
set sort_aux=last-date-received
set wait_key=no
set move=no
set auto_tag=yes
set envelope_from=yes
set edit_headers=yes
set reverse_alias=yes
set markers=no
set metoo=no
#Linux, screen, and putty/Win all seem to support line chars now
#set ascii_chars=yes
set ascii_chars=no

# Sidebar settings
set sidebar_visible
set sidebar_format="%B%<F? [%F]>%*  %<N?%N/>%S
set sidebar_short_path		# display just the last segment of path
set sidebar_width=20
set mail_check_stats=yes	# read mail stats for %N/%S formats

# force quoted printable encoding if there are 8bit chars in the message, so that I
# can put in soft line breaks that the rest of the world respects, not format=flowed
set text_flowed=no
set allow_8bit=no

set help=no
unset pipe_decode

# NNTP config
set nntp_authenticators=user    # eternal-september.org only works with this
# set nntp_pass=                # password in KeePass
set news_cache_dir=~/.cache/mutt

# the most frequent thing I do in the file browser is search for 
# Maildirs, so optimize mask for that case
set mask="^\."

# set environment dependent options
source '~/.mutt/bin/env_dependent_options.sh|'

# mailboxes
unmailboxes
mailboxes !
source ~/.mutt/rc/mailboxes

source ~/.mutt/aliases
source ~/.mutt/mailinglists
source ~/.mutt/rc/headers
source ~/.mutt/rc/print-normal.rc
source ~/.mutt/rc/crypt
source ~/.mutt/rc/charset
source ~/.mutt/rc/save-hook.rc
source ~/.mutt/rc/send-hook.rc

# Note:  All letters in the reply_regexp must be lower-case, else the
# entire pattern will be treated as case-sensitive.
set reply_regexp="^((\
out of office autoreply:|\
(\\(fwd\\))|\
(re(\\[[0-9]\\])?|aw|fw|fwd):\
)[ \t]*)+"

# Set $strict_threads in large mailboxes (which are likely to have duplicated subjects)
folder-hook .           set strict_threads=no
folder-hook =sent       set strict_threads=yes
folder-hook =.archive*  set strict_threads=yes

# Colors
uncolor index *
uncolor body *
uncolor header *
source ~/.mutt/rc/colors.rc
color index     brightyellow default "~h '^X-Archive: Yes'"
color index     default      default "~h '^X-Archive: Unsure'"
color index     brightblue   default "~h '^X-Archive: No'"
color index     brightred    default "~h '^X-Bogosity: (Yes|Spam|Unsure)'"
uncolor index                        "~D" # override colors.rc with my own
color index     brightwhite  red     "~D" # color scheme for deleted messages
color header    brightred    default ^Delivered-To:\ edgewood\\+default\@loghyr\.(farmgate|theblackmans)
color header    brightred    default ^(Envelope-to|X-Bogosity):

bind index <Down> next-entry
bind index <Up> previous-entry
bind pager <Up> previous-line

# use query_command for To: tab completion, swap ^T to do alias expansion
bind editor <Tab> complete-query
bind editor ^T complete

# needed for some combination of client->screen->home system terminals
bind index '<ESC>OD' first-entry
bind index '<ESC>OH' first-entry
bind index '<ESC>OF' last-entry
bind pager '<ESC>OD' top
bind pager '<ESC>OH' top
bind pager '<ESC>OF' bottom

# sidebar bindings
bind index,pager "'n" sidebar-next
macro index,pager "'N" <sidebar-next><sidebar-next><sidebar-next>
bind index,pager "'p" sidebar-prev
macro index,pager "'P" <sidebar-prev><sidebar-prev><sidebar-prev>
bind index,pager "'o" sidebar-open
macro index,pager B '<enter-command>toggle sidebar_visible<enter>'

# make replying to the list something I don't have to think about
message-hook .                    'bind pager l list-reply; bind pager r reply'
message-hook ~l                   'bind pager r list-reply; bind pager l reply'
message-hook "~h 'List-Id: <raljc(broadcast|Projects).yahoo'" 'bind pager l reply; bind pager r reply'

# show unread messages only in newsgroups
folder-hook .                   push '<limit>all<enter>'
folder-hook 'news://.*'         push '<limit>(~N|~O)<enter>'

macro generic \Cl ":source ~/.mutt/muttrc\n<refresh>"

# save in specific boxes
macro index,pager -n "<save-message>=.lists.newsletters<enter><enter>" "save message to lists.newsletters"

# classification
macro index J "<save-message>=.incoming.archive.not\n\n" "mark message not-archivable"
macro index,pager S "<save-message>=.incoming.spam\n\n" "mark message as spam"
macro index A "<enter-command>set my_resolve=\$resolve resolve=no<enter>\
<save-message>=.incoming.archive\n\n<undelete-message>\
<enter-command>set resolve=\$my_resolve &my_resolve<enter>" "mark message archivable"
macro index,pager H "<enter-command>set my_resolve=\$resolve resolve=no<enter>\
<save-message>=.incoming.ham\n\n<undelete-message>\
<enter-command>set resolve=\$my_resolve &my_resolve<enter>" "mark message as ham"

# open specific boxes
macro index <Esc>a "<sync-mailbox>!screen -X screen mutt -f =.archive\n"
macro index <Esc>A "<sync-mailbox>!screen -X screen mutt -f =.archive.not\n"
macro index <Esc>L "<sync-mailbox>!screen -X screen mutt -f =.lists.inbox\n"
macro index <Esc>P "<sync-mailbox>!screen -X screen mutt -f =.daemon.pending\n"
macro index F '<sync-mailbox><enter-command>set my_folder=`~/.mutt/bin/mutt-prompt "Change to folder" \\`; push "!screen -X screen mutt -f $my_folder\<enter\>"<enter>'
macro index <Esc>p "<enter-command>unset pipe_decode<enter><pipe-message>pendingMail\nd"

macro index,pager,browser ,c "<pipe-message>xclip -i\n"

# reply with template
macro index,pager R "<pipe-message>~/.mutt/bin/replyTemplate\n<recall-message>"

# prompt for mairix search parameters
macro index,pager,browser ,m "\
<enter-command> set my_wait_key=\$wait_key wait_key=no<enter>\
<shell-escape>screen -X screen -t 'mutt search' sh -c 'mairixquery && mutt -f =search'<enter>\
<enter-command>set wait_key=\$my_wait_key &my_wait_key<enter>" "mairix query"

folder-hook =search "set read_only=yes"

# create a mairix search of the messages in this thread
macro index,pager,browser ,i "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>~/.mutt/bin/mairixMessageId<enter><shell-escape>screen -t mutt mutt -f =search<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "mairix Message ID query"

# create a mairix search of the messages with this subject
macro index,pager,browser ,s "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>~/.mutt/bin/mairixSubject<enter><shell-escape>screen -t mutt mutt -f =search<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "mairix Subject query"

# create a mairix search of the messages from or to this sender
macro index,pager,browser ,f "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>~/.mutt/bin/mairixFrom<enter><shell-escape>screen -t mutt mutt -f =search<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "mairix sender query"

# pipe to logcheck_extract
macro index,pager,browser ,l "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<enter-command>set my_wait_key=\$wait_key wait_key=no<enter>\
<pipe-entry>~/.mutt/bin/logcheck-extract<enter><delete-message>\
<enter-command>set wait_key=\$my_wait_key &my_wait_key<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "logcheck extract"

# pipe to todo-extract
macro index,pager,browser ,t "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<enter-command>set my_wait_key=\$wait_key wait_key=yes<enter>\
<pipe-entry>~/.mutt/bin/todo-extract<enter><delete-message>\
<enter-command>set wait_key=\$my_wait_key &my_wait_key<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "todo extract"

# view Office docs in text viewer
macro attach O "<pipe-entry>muttOffice\n"

# save HTML to disk and print proxy URL
macro pager ,h "<view-attachments>,h"
macro attach ,h "<enter-command>set my_wait_key=\$wait_key wait_key=yes<enter>\
<save-entry>~/mail/mime/mutt.html<enter>o\
<shell-escape>echo http://loghyr.theblackmans:8000/mime/mutt.html<enter>\
<enter-command>set wait_key=\$my_wait_key &my_wait_key<enter>" "graphical HTML view"

# Save to incoming.ecommerce folder: daemon will print and move to .ecommerce
macro index,pager ,p "<save-message>=.incoming.ecommerce\n\n" "ecommerce print and save"

# show Received headers
macro index,pager,browser _r "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>formail -X Received: | less<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "list Received:"

# remove sanitized MIME attachments from ~/mail/mime
macro attach ,R "<pipe-entry>mimeRemoveAll\n"

# save MIME attachments to ~/media/Dropbox/Pictures/incoming
macro index,pager,browser ,dp "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>~/.mutt/bin/dropboxIncomingPictures<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "save pictures to Dropbox"

# kill thread
macro index,pager,browser _k "\
<enter-command>set my_pipe_decode=\$pipe_decode pipe_decode=no<enter>\
<pipe-entry>extractThreadIDs >> $folder/.nonmail/kill<enter>\
<enter-command>set pipe_decode=\$my_pipe_decode &my_pipe_decode<enter>" "kill thread"

